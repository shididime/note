<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title></title>
		<style>
			
		</style>
	</head>
	<body>
		<div id="example">
			<p>Original message: "{{ message }}"</p>
			<p>Computed reversed message: "{{ reversedMessage }}"</p>
		</div>
		<div id="demo">
			{{fullName}}
		</div>
		<!--绑定HTML CLass-->
		<div id="app-1">
			<span v-bind:class="{active:isactive,'text-danger':hasError}"></span>
		</div>
		<div id="app-2">
			<div v-bind:class="classObject"></div>
		</div>
		<!--数组-->
		<div id="app-3">
			<div v-bind:class="[activeClass,errorClass]"></div><!--class="avtive text-danger"-->
			<!--绑定内联样式-->
			<div v-bind:style="{color:activeColor,fontSize:fontSize +'px'}">绑定内联样式</div>		
			<div v-bind:style="styleObject">样式对象</div>
			<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div><!--这个class只有在isActive为true时才添加activeClass样式，一直又有errorClass-->
		</div>
	</body>
	<script src="https://unpkg.com/vue/dist/vue.js"></script>
	<script>
		var app3 = new Vue({
			el:"#app-3",
			data:{
				styleObject:{
					color:"blue",
					fontSize:'14px'
				},
				activeClass:"active",
				errorClass:"text-danger",
				activeColor:'red',
				fontSize:18
			}
		})
		var app2 = new Vue({
			el:"#app-2",
			data:{
				isActive:true,
				error:null
			},
			computed:{
				classObject:function(){
					return {
						active:this.isActive&&!this.error,
						 'text-danger': this.error && this.error.type === 'fatal'
					}
				}
			}
		})
		var app1 = new Vue({
			el:"#app-1",
			data:{
				isactive:true,
				hasError:true //这两个值发生变化 class也随着变化
			}
		})
		var vm = new Vue({
			el:"#example",
			data:{
				message:"hello"
			},
			computed:{
				reversedMessage:function(){
					return this.message.split('').reverse().join('')
				}
			}
		})
		var vm1 = new Vue({
			el:"#demo",
			data:{
				firstName:"Foo",
				lastName:"Bar",
				fullName:"FooBar"
			},
			watch:{
				firstName:function(val){
					this.fullName = val + '' +this.lastName
				},
				lastName:function(cal){
					this.fullName = this.firstName + '' +val
				}
			}
		})
		//computed 属性
		var vm2 = new Vue({
			el:"#demo",
			data:{
				firstName:'Foo',
				lastName:'Bar'
			},
			computed:{
				fullName:function(){
					return this.firstName+''+this.lastName
				}
			}
		})
	</script>
</html>
