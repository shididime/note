<!DOCTYPE html>
<html>

	<head>
		<meta charset="UTF-8">
		<title></title>
		<style>
			
		</style>
	</head>
	<body>
		<div id="app">
			{{message}}
		</div>
		<div id="app-2">
			<span v-bind:title="message">鼠标悬停看效果</span><!-- v-bind 属性为指令 ，将这个元素节点的 title 属性和 Vue 实例的 message 属性保持一致”-->
		</div>
		<div id="app-3">
			<p v-if="seen">条件指令 现在能看见文字</p>
		</div>
		<div id="app-4">
			<ul>
				<li v-for="todo in todos">{{todo.text}}</li><!--v-for指令通过数组数据来渲染项目列表-->
			</ul>
		</div>
		<div id="app-5">
			<p>{{message}}</p>
			<button v-on:click="reverseMessage">逆转文字</button><!--vue 用v-on来监听事件-->
		</div>
		<div id="app-6">
			<p>{{message}}</p>
			<input v-model="message">
		</div>
		<div id="app-7">
			<ul>
				<todo-item v-for="item in items" v-bind:todo="item"></todo-item>
			</ul>
		</div>
	</body>
	<script src="https://unpkg.com/vue/dist/vue.js"></script>
	<script>
		var app = new Vue({
			el:"#app",
			data:{
				message:"学习vue"
			}
		});
		var app2 = new Vue({
  			el: '#app-2',
  			data: {
    			message: '页面加载于 ' + new Date()
  			}
		});
		var app3 = new Vue({
			e1:'#app-3',
			data: {
				seen:true//为false就看不见文字
			}
		});
		var app4 = new Vue({
			el:"#app-4",
			data: {
				todos:[
					{text:"第一条"},
					{text:"第二条"},
					{text:"第三条"}
				]
			}
		})
		app4.todos.push({text:"插入新数据"})//可以通过push方法插入数据
		var app5 = new Vue({
			el:"#app-5",
			data: {
				message:"事件监听器 demo"
			},
			methods:{
				reverseMessage:function(){
					this.message = this.message.split('').reverse().join('')
				}
			}
		});
		var app6 = new Vue({
			el:"#app-6",
			data: {
				message:"表单输入和应用状态之间的双向绑定"
			}
		});
		Vue.component('todo-item', {
			//创建一个todo-item数组
			//这个数组自定义一个属性 todo
			props:['todo'],
  			template: '<li>{{todo.text}}</li>'
		})
		var app7 = new Vue({
			el:"#app-7",
			data:{
				items:[
				{text:"第一条组件模板"},
				{text:"第二条组件模板"},
				{text:"第三天组件模板"}
				]
			}
		})
	</script>
</html>
